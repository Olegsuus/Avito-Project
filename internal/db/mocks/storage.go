// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "Avito-Project/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// AddAccessLevel provides a mock function with given fields: _a0
func (_m *Storage) AddAccessLevel(_a0 *models.AccessLevel) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddAccessLevel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.AccessLevel) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_AddAccessLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAccessLevel'
type Storage_AddAccessLevel_Call struct {
	*mock.Call
}

// AddAccessLevel is a helper method to define mock.On call
//   - _a0 *models.AccessLevel
func (_e *Storage_Expecter) AddAccessLevel(_a0 interface{}) *Storage_AddAccessLevel_Call {
	return &Storage_AddAccessLevel_Call{Call: _e.mock.On("AddAccessLevel", _a0)}
}

func (_c *Storage_AddAccessLevel_Call) Run(run func(_a0 *models.AccessLevel)) *Storage_AddAccessLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.AccessLevel))
	})
	return _c
}

func (_c *Storage_AddAccessLevel_Call) Return(_a0 error) *Storage_AddAccessLevel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_AddAccessLevel_Call) RunAndReturn(run func(*models.AccessLevel) error) *Storage_AddAccessLevel_Call {
	_c.Call.Return(run)
	return _c
}

// AddBanner provides a mock function with given fields: _a0
func (_m *Storage) AddBanner(_a0 *models.Banner) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddBanner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Banner) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_AddBanner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBanner'
type Storage_AddBanner_Call struct {
	*mock.Call
}

// AddBanner is a helper method to define mock.On call
//   - _a0 *models.Banner
func (_e *Storage_Expecter) AddBanner(_a0 interface{}) *Storage_AddBanner_Call {
	return &Storage_AddBanner_Call{Call: _e.mock.On("AddBanner", _a0)}
}

func (_c *Storage_AddBanner_Call) Run(run func(_a0 *models.Banner)) *Storage_AddBanner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Banner))
	})
	return _c
}

func (_c *Storage_AddBanner_Call) Return(_a0 error) *Storage_AddBanner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_AddBanner_Call) RunAndReturn(run func(*models.Banner) error) *Storage_AddBanner_Call {
	_c.Call.Return(run)
	return _c
}

// AddUser provides a mock function with given fields: _a0
func (_m *Storage) AddUser(_a0 *models.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_AddUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUser'
type Storage_AddUser_Call struct {
	*mock.Call
}

// AddUser is a helper method to define mock.On call
//   - _a0 *models.User
func (_e *Storage_Expecter) AddUser(_a0 interface{}) *Storage_AddUser_Call {
	return &Storage_AddUser_Call{Call: _e.mock.On("AddUser", _a0)}
}

func (_c *Storage_AddUser_Call) Run(run func(_a0 *models.User)) *Storage_AddUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *Storage_AddUser_Call) Return(_a0 error) *Storage_AddUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_AddUser_Call) RunAndReturn(run func(*models.User) error) *Storage_AddUser_Call {
	_c.Call.Return(run)
	return _c
}

// AuthenticateUser provides a mock function with given fields: _a0, _a1
func (_m *Storage) AuthenticateUser(_a0 string, _a1 string) (*models.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AuthenticateUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_AuthenticateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticateUser'
type Storage_AuthenticateUser_Call struct {
	*mock.Call
}

// AuthenticateUser is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *Storage_Expecter) AuthenticateUser(_a0 interface{}, _a1 interface{}) *Storage_AuthenticateUser_Call {
	return &Storage_AuthenticateUser_Call{Call: _e.mock.On("AuthenticateUser", _a0, _a1)}
}

func (_c *Storage_AuthenticateUser_Call) Run(run func(_a0 string, _a1 string)) *Storage_AuthenticateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Storage_AuthenticateUser_Call) Return(_a0 *models.User, _a1 error) *Storage_AuthenticateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_AuthenticateUser_Call) RunAndReturn(run func(string, string) (*models.User, error)) *Storage_AuthenticateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBanner provides a mock function with given fields: _a0
func (_m *Storage) DeleteBanner(_a0 int) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBanner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_DeleteBanner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBanner'
type Storage_DeleteBanner_Call struct {
	*mock.Call
}

// DeleteBanner is a helper method to define mock.On call
//   - _a0 int
func (_e *Storage_Expecter) DeleteBanner(_a0 interface{}) *Storage_DeleteBanner_Call {
	return &Storage_DeleteBanner_Call{Call: _e.mock.On("DeleteBanner", _a0)}
}

func (_c *Storage_DeleteBanner_Call) Run(run func(_a0 int)) *Storage_DeleteBanner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Storage_DeleteBanner_Call) Return(_a0 error) *Storage_DeleteBanner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_DeleteBanner_Call) RunAndReturn(run func(int) error) *Storage_DeleteBanner_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: _a0
func (_m *Storage) DeleteUser(_a0 int) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type Storage_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - _a0 int
func (_e *Storage_Expecter) DeleteUser(_a0 interface{}) *Storage_DeleteUser_Call {
	return &Storage_DeleteUser_Call{Call: _e.mock.On("DeleteUser", _a0)}
}

func (_c *Storage_DeleteUser_Call) Run(run func(_a0 int)) *Storage_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Storage_DeleteUser_Call) Return(_a0 error) *Storage_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_DeleteUser_Call) RunAndReturn(run func(int) error) *Storage_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllBanners provides a mock function with given fields:
func (_m *Storage) GetAllBanners() ([]models.Banner, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllBanners")
	}

	var r0 []models.Banner
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Banner, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Banner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Banner)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetAllBanners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllBanners'
type Storage_GetAllBanners_Call struct {
	*mock.Call
}

// GetAllBanners is a helper method to define mock.On call
func (_e *Storage_Expecter) GetAllBanners() *Storage_GetAllBanners_Call {
	return &Storage_GetAllBanners_Call{Call: _e.mock.On("GetAllBanners")}
}

func (_c *Storage_GetAllBanners_Call) Run(run func()) *Storage_GetAllBanners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storage_GetAllBanners_Call) Return(_a0 []models.Banner, _a1 error) *Storage_GetAllBanners_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetAllBanners_Call) RunAndReturn(run func() ([]models.Banner, error)) *Storage_GetAllBanners_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields:
func (_m *Storage) GetAllUsers() ([]models.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type Storage_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
func (_e *Storage_Expecter) GetAllUsers() *Storage_GetAllUsers_Call {
	return &Storage_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers")}
}

func (_c *Storage_GetAllUsers_Call) Run(run func()) *Storage_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storage_GetAllUsers_Call) Return(_a0 []models.User, _a1 error) *Storage_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetAllUsers_Call) RunAndReturn(run func() ([]models.User, error)) *Storage_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetBanner provides a mock function with given fields: _a0
func (_m *Storage) GetBanner(_a0 int) (*models.Banner, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetBanner")
	}

	var r0 *models.Banner
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Banner, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Banner); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Banner)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetBanner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBanner'
type Storage_GetBanner_Call struct {
	*mock.Call
}

// GetBanner is a helper method to define mock.On call
//   - _a0 int
func (_e *Storage_Expecter) GetBanner(_a0 interface{}) *Storage_GetBanner_Call {
	return &Storage_GetBanner_Call{Call: _e.mock.On("GetBanner", _a0)}
}

func (_c *Storage_GetBanner_Call) Run(run func(_a0 int)) *Storage_GetBanner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Storage_GetBanner_Call) Return(_a0 *models.Banner, _a1 error) *Storage_GetBanner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetBanner_Call) RunAndReturn(run func(int) (*models.Banner, error)) *Storage_GetBanner_Call {
	_c.Call.Return(run)
	return _c
}

// GetBannerByFID provides a mock function with given fields: _a0
func (_m *Storage) GetBannerByFID(_a0 int) ([]models.Banner, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetBannerByFID")
	}

	var r0 []models.Banner
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]models.Banner, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) []models.Banner); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Banner)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetBannerByFID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBannerByFID'
type Storage_GetBannerByFID_Call struct {
	*mock.Call
}

// GetBannerByFID is a helper method to define mock.On call
//   - _a0 int
func (_e *Storage_Expecter) GetBannerByFID(_a0 interface{}) *Storage_GetBannerByFID_Call {
	return &Storage_GetBannerByFID_Call{Call: _e.mock.On("GetBannerByFID", _a0)}
}

func (_c *Storage_GetBannerByFID_Call) Run(run func(_a0 int)) *Storage_GetBannerByFID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Storage_GetBannerByFID_Call) Return(_a0 []models.Banner, _a1 error) *Storage_GetBannerByFID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetBannerByFID_Call) RunAndReturn(run func(int) ([]models.Banner, error)) *Storage_GetBannerByFID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBannerByTagID provides a mock function with given fields: _a0
func (_m *Storage) GetBannerByTagID(_a0 int) ([]models.Banner, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetBannerByTagID")
	}

	var r0 []models.Banner
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]models.Banner, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) []models.Banner); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Banner)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetBannerByTagID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBannerByTagID'
type Storage_GetBannerByTagID_Call struct {
	*mock.Call
}

// GetBannerByTagID is a helper method to define mock.On call
//   - _a0 int
func (_e *Storage_Expecter) GetBannerByTagID(_a0 interface{}) *Storage_GetBannerByTagID_Call {
	return &Storage_GetBannerByTagID_Call{Call: _e.mock.On("GetBannerByTagID", _a0)}
}

func (_c *Storage_GetBannerByTagID_Call) Run(run func(_a0 int)) *Storage_GetBannerByTagID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Storage_GetBannerByTagID_Call) Return(_a0 []models.Banner, _a1 error) *Storage_GetBannerByTagID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetBannerByTagID_Call) RunAndReturn(run func(int) ([]models.Banner, error)) *Storage_GetBannerByTagID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBannersPaginated provides a mock function with given fields: _a0, _a1
func (_m *Storage) GetBannersPaginated(_a0 int, _a1 int) ([]models.Banner, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBannersPaginated")
	}

	var r0 []models.Banner
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]models.Banner, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int, int) []models.Banner); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Banner)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetBannersPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBannersPaginated'
type Storage_GetBannersPaginated_Call struct {
	*mock.Call
}

// GetBannersPaginated is a helper method to define mock.On call
//   - _a0 int
//   - _a1 int
func (_e *Storage_Expecter) GetBannersPaginated(_a0 interface{}, _a1 interface{}) *Storage_GetBannersPaginated_Call {
	return &Storage_GetBannersPaginated_Call{Call: _e.mock.On("GetBannersPaginated", _a0, _a1)}
}

func (_c *Storage_GetBannersPaginated_Call) Run(run func(_a0 int, _a1 int)) *Storage_GetBannersPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *Storage_GetBannersPaginated_Call) Return(_a0 []models.Banner, _a1 error) *Storage_GetBannersPaginated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetBannersPaginated_Call) RunAndReturn(run func(int, int) ([]models.Banner, error)) *Storage_GetBannersPaginated_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: _a0
func (_m *Storage) GetUserByID(_a0 int) (*models.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *models.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type Storage_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - _a0 int
func (_e *Storage_Expecter) GetUserByID(_a0 interface{}) *Storage_GetUserByID_Call {
	return &Storage_GetUserByID_Call{Call: _e.mock.On("GetUserByID", _a0)}
}

func (_c *Storage_GetUserByID_Call) Run(run func(_a0 int)) *Storage_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Storage_GetUserByID_Call) Return(_a0 *models.User, _a1 error) *Storage_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetUserByID_Call) RunAndReturn(run func(int) (*models.User, error)) *Storage_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByToken provides a mock function with given fields: _a0
func (_m *Storage) GetUserByToken(_a0 string) (*models.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByToken")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetUserByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByToken'
type Storage_GetUserByToken_Call struct {
	*mock.Call
}

// GetUserByToken is a helper method to define mock.On call
//   - _a0 string
func (_e *Storage_Expecter) GetUserByToken(_a0 interface{}) *Storage_GetUserByToken_Call {
	return &Storage_GetUserByToken_Call{Call: _e.mock.On("GetUserByToken", _a0)}
}

func (_c *Storage_GetUserByToken_Call) Run(run func(_a0 string)) *Storage_GetUserByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Storage_GetUserByToken_Call) Return(_a0 *models.User, _a1 error) *Storage_GetUserByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetUserByToken_Call) RunAndReturn(run func(string) (*models.User, error)) *Storage_GetUserByToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersPaginated provides a mock function with given fields: _a0, _a1
func (_m *Storage) GetUsersPaginated(_a0 int, _a1 int) ([]models.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersPaginated")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]models.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int, int) []models.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetUsersPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersPaginated'
type Storage_GetUsersPaginated_Call struct {
	*mock.Call
}

// GetUsersPaginated is a helper method to define mock.On call
//   - _a0 int
//   - _a1 int
func (_e *Storage_Expecter) GetUsersPaginated(_a0 interface{}, _a1 interface{}) *Storage_GetUsersPaginated_Call {
	return &Storage_GetUsersPaginated_Call{Call: _e.mock.On("GetUsersPaginated", _a0, _a1)}
}

func (_c *Storage_GetUsersPaginated_Call) Run(run func(_a0 int, _a1 int)) *Storage_GetUsersPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *Storage_GetUsersPaginated_Call) Return(_a0 []models.User, _a1 error) *Storage_GetUsersPaginated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetUsersPaginated_Call) RunAndReturn(run func(int, int) ([]models.User, error)) *Storage_GetUsersPaginated_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *Storage) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Storage_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *Storage_Expecter) Stop() *Storage_Stop_Call {
	return &Storage_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *Storage_Stop_Call) Run(run func()) *Storage_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storage_Stop_Call) Return(_a0 error) *Storage_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_Stop_Call) RunAndReturn(run func() error) *Storage_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: user
func (_m *Storage) UpdateUser(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type Storage_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - user *models.User
func (_e *Storage_Expecter) UpdateUser(user interface{}) *Storage_UpdateUser_Call {
	return &Storage_UpdateUser_Call{Call: _e.mock.On("UpdateUser", user)}
}

func (_c *Storage_UpdateUser_Call) Run(run func(user *models.User)) *Storage_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *Storage_UpdateUser_Call) Return(_a0 error) *Storage_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_UpdateUser_Call) RunAndReturn(run func(*models.User) error) *Storage_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
